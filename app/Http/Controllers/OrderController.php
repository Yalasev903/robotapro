<?php

namespace App\Http\Controllers;

use App\Models\Order;
use App\Models\Ad;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use App\Services\FondyService;
use Illuminate\Support\Facades\Log;

class OrderController extends Controller
{
    public function index()
    {
        $user = Auth::user();

        if ($user->role === 'customer') {
            $orders = Order::where('user_id', $user->id)->latest()->get();
        } elseif ($user->role === 'executor') {
            $orders = Order::where('executor_id', $user->id)->latest()->get();
        } else {
            $orders = collect();
        }

        return view('orders.index', compact('orders'));
    }

    public function takeOrder(Ad $ad)
    {
        if (Auth::user()->role !== 'executor') {
            abort(403);
        }

        if ($ad->order) {
            if (in_array($ad->order->status, ['waiting', 'in_progress', 'pending_confirmation'])) {
                return back()->with('error', '–≠—Ç–æ—Ç –∑–∞–∫–∞–∑ —É–∂–µ –≤–∑—è—Ç.');
            }
            if ($ad->order->status === 'cancelled' && $ad->order->executor_id === Auth::id()) {
                return back()->with('error', '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –≤–∑—è—Ç—å —ç—Ç–æ—Ç –∑–∞–∫–∞–∑.');
            }
        }

        $order = Order::create([
            'ad_id' => $ad->id,
            'title' => $ad->title,
            'description' => $ad->description,
            'services_category_id' => $ad->servicesCategory->id ?? null,
            'user_id' => $ad->user_id,
            'executor_id' => Auth::id(),
            'status' => 'waiting',
        ]);

        return redirect()->route('orders.index')->with('success', '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ —Ç–∞ –ø—Ä–∏–π–Ω—è—Ç–æ.');
    }

    public function approveOrder(Order $order)
    {
        if (Auth::id() !== $order->user_id || Auth::user()->role !== 'customer') {
            abort(403);
        }

        if ($order->status !== 'waiting') {
            return back()->with('error', '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –≥–æ—Ç–æ–≤–æ –¥–æ –∑–∞–ø—É—Å–∫—É.');
        }

        $order->update([
            'status' => 'in_progress',
            'start_time' => now(),
        ]);

        return back()->with('success', '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è.');
    }

    public function completeOrder(Order $order)
    {
        if (Auth::id() !== $order->executor_id || Auth::user()->role !== 'executor') {
            abort(403);
        }

        if ($order->status !== 'in_progress') {
            return back()->with('error', '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –º–æ–∂–Ω–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–∏.');
        }

        $order->update([
            'status' => 'pending_confirmation',
            'end_time' => now(),
        ]);

        return back()->with('success', '–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–Ω–∏–∫–æ–º.');
    }

    public function confirmOrder(Order $order, FondyService $fondy)
    {
        if (Auth::id() !== $order->user_id || Auth::user()->role !== 'customer') {
            abort(403);
        }

        if ($order->status !== 'pending_confirmation') {
            return back()->with('error', '–ù–µ –º–æ–∂–Ω–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –Ω–∞ —Ü—å–æ–º—É –µ—Ç–∞–ø—ñ.');
        }

        $order->update(['status' => 'completed']);

        if ($order->executor) $order->executor->updateRating(1);
        if ($order->customer) $order->customer->updateRating(1);

        if ($order->isGuarantee() && $order->guarantee_payment_status === 'paid') {
            $order->update(['guarantee_payment_status' => 'transferring']);

            dispatch(function () use ($order, $fondy) {
                sleep(2); // –∏–º–∏—Ç–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞

                $fondy->sendPayout($order);

                $order->update([
                    'guarantee_payment_status' => 'transferred',
                    'guarantee_transferred_at' => now(),
                ]);
            })->afterResponse();
        }

        return back()->with('success', '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ. –ì—Ä–æ—à—ñ –ø–µ—Ä–µ—Ä–∞—Ö–æ–≤—É—é—Ç—å—Å—è –≤–∏–∫–æ–Ω–∞–≤—Ü—é.');
    }

    public function setNoGuarantee(Order $order)
    {
        if (Auth::id() !== $order->executor_id || $order->payment_type !== 'none') {
            abort(403);
        }

        $order->update([
            'payment_type' => 'no_guarantee',
        ]);

        return back()->with('success', '–†–æ–±–æ—Ç–∞ –±–µ–∑ –≥–∞—Ä–∞–Ω—Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞.');
    }

    public function cancelOrder(Request $request, Order $order)
    {
        $user = Auth::user();

        if (!($user->id === $order->user_id || $user->id === $order->executor_id)) {
            abort(403);
        }

        $data = $request->validate([
            'cancellation_reason' => 'required|string',
            'custom_reason' => 'nullable|string',
        ]);

        $reason = $data['cancellation_reason'] === 'other' ? $data['custom_reason'] : $data['cancellation_reason'];

        if (in_array($order->status, ['completed', 'cancelled'])) {
            return back()->with('error', '–ù–µ–º–æ–∂–ª–∏–≤–æ —Å–∫–∞—Å—É–≤–∞—Ç–∏.');
        }

        $order->update([
            'status' => 'cancelled',
            'cancellation_reason' => $reason,
            'cancelled_by' => $user->role,
            'cancelled_at' => now(),
        ]);

        return back()->with('success', '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.');
    }

    public function setGuarantee(Request $request, Order $order)
    {
        if (Auth::id() !== $order->executor_id || $order->payment_type !== 'none') {
            abort(403);
        }

        $data = $request->validate([
            'guarantee_amount' => 'required|numeric|min:1',
            'guarantee_card_number' => 'required|string|min:16|max:19',
        ]);

        $order->update([
            'payment_type' => 'guarantee',
            'guarantee_amount' => $data['guarantee_amount'],
            'guarantee_card_number' => $data['guarantee_card_number'],
            'guarantee_payment_status' => 'pending',
        ]);

        return back()->with('success', '–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –≥–∞—Ä–∞–Ω—Ç–∞ –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–∞.');
    }

    public function approveGuarantee(Order $order, FondyService $fondy)
    {
        if (Auth::id() !== $order->user_id || !$order->isGuarantee()) {
            abort(403);
        }

        if ($order->guarantee_payment_status !== 'pending') {
            return back()->with('error', '–û–ø–ª–∞—Ç–∞ –≤–∂–µ –∑—Ä–æ–±–ª–µ–Ω–∞ –∞–±–æ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è.');
        }

        $checkoutUrl = $fondy->createPayment($order);
        return redirect($checkoutUrl);
    }

    public function confirmGuaranteeTransfer(Order $order)
    {
        if (!Auth::user()->is_admin) abort(403);

        if ($order->guarantee_payment_status !== 'paid') {
            return back()->with('error', '–°–ø–æ—á–∞—Ç–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç–∏.');
        }

        $payout = round($order->guarantee_amount * 0.9, 2);

        $order->update([
            'guarantee_payment_status' => 'transferred',
            'guarantee_transferred_at' => now(),
        ]);

        return back()->with('success', "–í–∏–ø–ª–∞—Ç–∞ {$payout} –≥—Ä–Ω –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤–∏–∫–æ–Ω–∞–≤—Ü—é.");
    }

    public function paymentCallback(Request $request, Order $order)
    {
        \Log::info('üí≥ Payment callback received', [
            'order_id' => $order->id,
            'payment_type' => $order->payment_type,
            'order_status' => $request->input('order_status'),
            'guarantee_status' => $order->guarantee_payment_status,
        ]);

        if ($request->input('order_status') === 'approved') {
            $order->update([
                'guarantee_payment_status' => 'paid',
                'guarantee_paid_at' => now(),
                'status' => 'in_progress',
                'start_time' => now(),
            ]);

            \Log::info('‚úÖ Order marked as paid & started', ['order_id' => $order->id]);
        }

        return response()->json(['status' => 'ok']);
    }

    public function confirmPayment(Order $order)
    {
        return redirect()->route('orders.index')->with('success', '–û–ø–ª–∞—Ç–∞ –≥–∞—Ä–∞–Ω—Ç—É –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ.');
    }
}
